// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Messages.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PolarRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarRequest"

  var type: PolarRequest.TypeEnum {
    get {return _type ?? .read}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case read // = 0
    case write // = 1
    case delete // = 3

    init() {
      self = .read
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .read
      case 1: self = .write
      case 3: self = .delete
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .read: return 0
      case .write: return 1
      case .delete: return 3
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._path)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _type: PolarRequest.TypeEnum? = nil
  fileprivate var _path: String? = nil
}

struct PolarDirectory: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarDirectory"

  var entries: [PolarDirectory.PolarEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PolarEntry: SwiftProtobuf.Message {
    static let protoMessageName: String = PolarDirectory.protoMessageName + ".PolarEntry"

    var path: String {
      get {return _storage._path ?? String()}
      set {_uniqueStorage()._path = newValue}
    }
    /// Returns true if `path` has been explicitly set.
    var hasPath: Bool {return _storage._path != nil}
    /// Clears the value of `path`. Subsequent reads from it will return its default value.
    mutating func clearPath() {_storage._path = nil}

    var size: UInt32 {
      get {return _storage._size ?? 0}
      set {_uniqueStorage()._size = newValue}
    }
    /// Returns true if `size` has been explicitly set.
    var hasSize: Bool {return _storage._size != nil}
    /// Clears the value of `size`. Subsequent reads from it will return its default value.
    mutating func clearSize() {_storage._size = nil}

    var created: PolarDateTime {
      get {return _storage._created ?? PolarDateTime()}
      set {_uniqueStorage()._created = newValue}
    }
    /// Returns true if `created` has been explicitly set.
    var hasCreated: Bool {return _storage._created != nil}
    /// Clears the value of `created`. Subsequent reads from it will return its default value.
    mutating func clearCreated() {_storage._created = nil}

    var modified: PolarDateTime {
      get {return _storage._modified ?? PolarDateTime()}
      set {_uniqueStorage()._modified = newValue}
    }
    /// Returns true if `modified` has been explicitly set.
    var hasModified: Bool {return _storage._modified != nil}
    /// Clears the value of `modified`. Subsequent reads from it will return its default value.
    mutating func clearModified() {_storage._modified = nil}

    var unknown: PolarDateTime {
      get {return _storage._unknown ?? PolarDateTime()}
      set {_uniqueStorage()._unknown = newValue}
    }
    /// Returns true if `unknown` has been explicitly set.
    var hasUnknown: Bool {return _storage._unknown != nil}
    /// Clears the value of `unknown`. Subsequent reads from it will return its default value.
    mutating func clearUnknown() {_storage._unknown = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._path)
          case 2: try decoder.decodeSingularUInt32Field(value: &_storage._size)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._created)
          case 4: try decoder.decodeSingularMessageField(value: &_storage._modified)
          case 5: try decoder.decodeSingularMessageField(value: &_storage._unknown)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._path {
          try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if let v = _storage._size {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
        }
        if let v = _storage._created {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if let v = _storage._modified {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        }
        if let v = _storage._unknown {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PolarSessionData: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarSessionData"

  var start: PolarDateTime {
    get {return _storage._start ?? PolarDateTime()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_storage._start = nil}

  var end: PolarDateTime {
    get {return _storage._end ?? PolarDateTime()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {_storage._end = nil}

  var exerciseCount: UInt32 {
    get {return _storage._exerciseCount ?? 0}
    set {_uniqueStorage()._exerciseCount = newValue}
  }
  /// Returns true if `exerciseCount` has been explicitly set.
  var hasExerciseCount: Bool {return _storage._exerciseCount != nil}
  /// Clears the value of `exerciseCount`. Subsequent reads from it will return its default value.
  mutating func clearExerciseCount() {_storage._exerciseCount = nil}

  var device: String {
    get {return _storage._device ?? String()}
    set {_uniqueStorage()._device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return _storage._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {_storage._device = nil}

  var model: String {
    get {return _storage._model ?? String()}
    set {_uniqueStorage()._model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return _storage._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {_storage._model = nil}

  var duration: PolarTime {
    get {return _storage._duration ?? PolarTime()}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_storage._duration = nil}

  var distance: Float {
    get {return _storage._distance ?? 0}
    set {_uniqueStorage()._distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  var hasDistance: Bool {return _storage._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  mutating func clearDistance() {_storage._distance = nil}

  var calories: UInt32 {
    get {return _storage._calories ?? 0}
    set {_uniqueStorage()._calories = newValue}
  }
  /// Returns true if `calories` has been explicitly set.
  var hasCalories: Bool {return _storage._calories != nil}
  /// Clears the value of `calories`. Subsequent reads from it will return its default value.
  mutating func clearCalories() {_storage._calories = nil}

  var heartrate: PolarHeartrate {
    get {return _storage._heartrate ?? PolarHeartrate()}
    set {_uniqueStorage()._heartrate = newValue}
  }
  /// Returns true if `heartrate` has been explicitly set.
  var hasHeartrate: Bool {return _storage._heartrate != nil}
  /// Clears the value of `heartrate`. Subsequent reads from it will return its default value.
  mutating func clearHeartrate() {_storage._heartrate = nil}

  var heartrateDuration: PolarTime {
    get {return _storage._heartrateDuration ?? PolarTime()}
    set {_uniqueStorage()._heartrateDuration = newValue}
  }
  /// Returns true if `heartrateDuration` has been explicitly set.
  var hasHeartrateDuration: Bool {return _storage._heartrateDuration != nil}
  /// Clears the value of `heartrateDuration`. Subsequent reads from it will return its default value.
  mutating func clearHeartrateDuration() {_storage._heartrateDuration = nil}

  var trainingLoad: PolarTrainingLoad {
    get {return _storage._trainingLoad ?? PolarTrainingLoad()}
    set {_uniqueStorage()._trainingLoad = newValue}
  }
  /// Returns true if `trainingLoad` has been explicitly set.
  var hasTrainingLoad: Bool {return _storage._trainingLoad != nil}
  /// Clears the value of `trainingLoad`. Subsequent reads from it will return its default value.
  mutating func clearTrainingLoad() {_storage._trainingLoad = nil}

  var label: PolarSessionData.PolarLabel {
    get {return _storage._label ?? PolarSessionData.PolarLabel()}
    set {_uniqueStorage()._label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  var hasLabel: Bool {return _storage._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  mutating func clearLabel() {_storage._label = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PolarLabel: SwiftProtobuf.Message {
    static let protoMessageName: String = PolarSessionData.protoMessageName + ".PolarLabel"

    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self._name)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _name: String? = nil
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._exerciseCount)
        case 3: try decoder.decodeSingularStringField(value: &_storage._device)
        case 4: try decoder.decodeSingularStringField(value: &_storage._model)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._duration)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._distance)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._calories)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._heartrate)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._heartrateDuration)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._trainingLoad)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._label)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._end)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._exerciseCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._device {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._model {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._duration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._distance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      }
      if let v = _storage._calories {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._heartrate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._heartrateDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._trainingLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._label {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PolarExerciseData: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarExerciseData"

  var start: PolarDateTime {
    get {return _storage._start ?? PolarDateTime()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_storage._start = nil}

  var duration: PolarTime {
    get {return _storage._duration ?? PolarTime()}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_storage._duration = nil}

  var sport: PolarExerciseData.PolarSport {
    get {return _storage._sport ?? PolarExerciseData.PolarSport()}
    set {_uniqueStorage()._sport = newValue}
  }
  /// Returns true if `sport` has been explicitly set.
  var hasSport: Bool {return _storage._sport != nil}
  /// Clears the value of `sport`. Subsequent reads from it will return its default value.
  mutating func clearSport() {_storage._sport = nil}

  var distance: Float {
    get {return _storage._distance ?? 0}
    set {_uniqueStorage()._distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  var hasDistance: Bool {return _storage._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  mutating func clearDistance() {_storage._distance = nil}

  var calories: UInt32 {
    get {return _storage._calories ?? 0}
    set {_uniqueStorage()._calories = newValue}
  }
  /// Returns true if `calories` has been explicitly set.
  var hasCalories: Bool {return _storage._calories != nil}
  /// Clears the value of `calories`. Subsequent reads from it will return its default value.
  mutating func clearCalories() {_storage._calories = nil}

  var trainingLoad: PolarTrainingLoad {
    get {return _storage._trainingLoad ?? PolarTrainingLoad()}
    set {_uniqueStorage()._trainingLoad = newValue}
  }
  /// Returns true if `trainingLoad` has been explicitly set.
  var hasTrainingLoad: Bool {return _storage._trainingLoad != nil}
  /// Clears the value of `trainingLoad`. Subsequent reads from it will return its default value.
  mutating func clearTrainingLoad() {_storage._trainingLoad = nil}

  var index: PolarExerciseData.PolarRunningIndex {
    get {return _storage._index ?? PolarExerciseData.PolarRunningIndex()}
    set {_uniqueStorage()._index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return _storage._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {_storage._index = nil}

  var ascent: Float {
    get {return _storage._ascent ?? 0}
    set {_uniqueStorage()._ascent = newValue}
  }
  /// Returns true if `ascent` has been explicitly set.
  var hasAscent: Bool {return _storage._ascent != nil}
  /// Clears the value of `ascent`. Subsequent reads from it will return its default value.
  mutating func clearAscent() {_storage._ascent = nil}

  var descent: Float {
    get {return _storage._descent ?? 0}
    set {_uniqueStorage()._descent = newValue}
  }
  /// Returns true if `descent` has been explicitly set.
  var hasDescent: Bool {return _storage._descent != nil}
  /// Clears the value of `descent`. Subsequent reads from it will return its default value.
  mutating func clearDescent() {_storage._descent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PolarSport: SwiftProtobuf.Message {
    static let protoMessageName: String = PolarExerciseData.protoMessageName + ".PolarSport"

    var value: UInt64 {
      get {return _value ?? 0}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &self._value)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._value {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _value: UInt64? = nil
  }

  struct PolarRunningIndex: SwiftProtobuf.Message {
    static let protoMessageName: String = PolarExerciseData.protoMessageName + ".PolarRunningIndex"

    var value: UInt32 {
      get {return _storage._value ?? 0}
      set {_uniqueStorage()._value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return _storage._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {_storage._value = nil}

    var duration: PolarTime {
      get {return _storage._duration ?? PolarTime()}
      set {_uniqueStorage()._duration = newValue}
    }
    /// Returns true if `duration` has been explicitly set.
    var hasDuration: Bool {return _storage._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    mutating func clearDuration() {_storage._duration = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularUInt32Field(value: &_storage._value)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._duration)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._value {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
        }
        if let v = _storage._duration {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._duration)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sport)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._distance)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._calories)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._trainingLoad)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._index)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._ascent)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._descent)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._duration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._sport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._distance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      }
      if let v = _storage._calories {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._trainingLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._ascent {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      }
      if let v = _storage._descent {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PolarHeartrate: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarHeartrate"

  var average: UInt32 {
    get {return _average ?? 0}
    set {_average = newValue}
  }
  /// Returns true if `average` has been explicitly set.
  var hasAverage: Bool {return self._average != nil}
  /// Clears the value of `average`. Subsequent reads from it will return its default value.
  mutating func clearAverage() {self._average = nil}

  var maximum: UInt32 {
    get {return _maximum ?? 0}
    set {_maximum = newValue}
  }
  /// Returns true if `maximum` has been explicitly set.
  var hasMaximum: Bool {return self._maximum != nil}
  /// Clears the value of `maximum`. Subsequent reads from it will return its default value.
  mutating func clearMaximum() {self._maximum = nil}

  var minimum: UInt32 {
    get {return _minimum ?? 0}
    set {_minimum = newValue}
  }
  /// Returns true if `minimum` has been explicitly set.
  var hasMinimum: Bool {return self._minimum != nil}
  /// Clears the value of `minimum`. Subsequent reads from it will return its default value.
  mutating func clearMinimum() {self._minimum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._average)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._maximum)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._minimum)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._average {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maximum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._minimum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _average: UInt32? = nil
  fileprivate var _maximum: UInt32? = nil
  fileprivate var _minimum: UInt32? = nil
}

struct PolarTrainingLoad: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarTrainingLoad"

  var value: UInt32 {
    get {return _storage._value ?? 0}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_storage._value = nil}

  var recovery: PolarTime {
    get {return _storage._recovery ?? PolarTime()}
    set {_uniqueStorage()._recovery = newValue}
  }
  /// Returns true if `recovery` has been explicitly set.
  var hasRecovery: Bool {return _storage._recovery != nil}
  /// Clears the value of `recovery`. Subsequent reads from it will return its default value.
  mutating func clearRecovery() {_storage._recovery = nil}

  var carbs: UInt32 {
    get {return _storage._carbs ?? 0}
    set {_uniqueStorage()._carbs = newValue}
  }
  /// Returns true if `carbs` has been explicitly set.
  var hasCarbs: Bool {return _storage._carbs != nil}
  /// Clears the value of `carbs`. Subsequent reads from it will return its default value.
  mutating func clearCarbs() {_storage._carbs = nil}

  var protein: UInt32 {
    get {return _storage._protein ?? 0}
    set {_uniqueStorage()._protein = newValue}
  }
  /// Returns true if `protein` has been explicitly set.
  var hasProtein: Bool {return _storage._protein != nil}
  /// Clears the value of `protein`. Subsequent reads from it will return its default value.
  mutating func clearProtein() {_storage._protein = nil}

  var fat: UInt32 {
    get {return _storage._fat ?? 0}
    set {_uniqueStorage()._fat = newValue}
  }
  /// Returns true if `fat` has been explicitly set.
  var hasFat: Bool {return _storage._fat != nil}
  /// Clears the value of `fat`. Subsequent reads from it will return its default value.
  mutating func clearFat() {_storage._fat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._value)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._recovery)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._carbs)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._protein)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._fat)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._recovery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._carbs {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._protein {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._fat {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PolarDateTime: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarDateTime"

  var date: PolarDate {
    get {return _storage._date ?? PolarDate()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_storage._date = nil}

  var time: PolarTime {
    get {return _storage._time ?? PolarTime()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_storage._time = nil}

  var timezone: UInt32 {
    get {return _storage._timezone ?? 0}
    set {_uniqueStorage()._timezone = newValue}
  }
  /// Returns true if `timezone` has been explicitly set.
  var hasTimezone: Bool {return _storage._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
  mutating func clearTimezone() {_storage._timezone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._timezone)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._timezone {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PolarDate: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarDate"

  var year: UInt32 {
    get {return _year ?? 0}
    set {_year = newValue}
  }
  /// Returns true if `year` has been explicitly set.
  var hasYear: Bool {return self._year != nil}
  /// Clears the value of `year`. Subsequent reads from it will return its default value.
  mutating func clearYear() {self._year = nil}

  var month: UInt32 {
    get {return _month ?? 0}
    set {_month = newValue}
  }
  /// Returns true if `month` has been explicitly set.
  var hasMonth: Bool {return self._month != nil}
  /// Clears the value of `month`. Subsequent reads from it will return its default value.
  mutating func clearMonth() {self._month = nil}

  var day: UInt32 {
    get {return _day ?? 0}
    set {_day = newValue}
  }
  /// Returns true if `day` has been explicitly set.
  var hasDay: Bool {return self._day != nil}
  /// Clears the value of `day`. Subsequent reads from it will return its default value.
  mutating func clearDay() {self._day = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._year)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._month)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._day)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._year {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._month {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._day {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _year: UInt32? = nil
  fileprivate var _month: UInt32? = nil
  fileprivate var _day: UInt32? = nil
}

struct PolarTime: SwiftProtobuf.Message {
  static let protoMessageName: String = "PolarTime"

  var hour: UInt32 {
    get {return _hour ?? 0}
    set {_hour = newValue}
  }
  /// Returns true if `hour` has been explicitly set.
  var hasHour: Bool {return self._hour != nil}
  /// Clears the value of `hour`. Subsequent reads from it will return its default value.
  mutating func clearHour() {self._hour = nil}

  var minute: UInt32 {
    get {return _minute ?? 0}
    set {_minute = newValue}
  }
  /// Returns true if `minute` has been explicitly set.
  var hasMinute: Bool {return self._minute != nil}
  /// Clears the value of `minute`. Subsequent reads from it will return its default value.
  mutating func clearMinute() {self._minute = nil}

  var second: UInt32 {
    get {return _second ?? 0}
    set {_second = newValue}
  }
  /// Returns true if `second` has been explicitly set.
  var hasSecond: Bool {return self._second != nil}
  /// Clears the value of `second`. Subsequent reads from it will return its default value.
  mutating func clearSecond() {self._second = nil}

  var milisecond: UInt32 {
    get {return _milisecond ?? 0}
    set {_milisecond = newValue}
  }
  /// Returns true if `milisecond` has been explicitly set.
  var hasMilisecond: Bool {return self._milisecond != nil}
  /// Clears the value of `milisecond`. Subsequent reads from it will return its default value.
  mutating func clearMilisecond() {self._milisecond = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._hour)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._minute)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._second)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._milisecond)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._hour {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._minute {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._second {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._milisecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _hour: UInt32? = nil
  fileprivate var _minute: UInt32? = nil
  fileprivate var _second: UInt32? = nil
  fileprivate var _milisecond: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PolarRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "path"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarRequest) -> Bool {
    if self._type != other._type {return false}
    if self._path != other._path {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarRequest.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "READ"),
    1: .same(proto: "WRITE"),
    3: .same(proto: "DELETE"),
  ]
}

extension PolarDirectory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarDirectory) -> Bool {
    if self.entries != other.entries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarDirectory.PolarEntry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "size"),
    3: .same(proto: "created"),
    4: .same(proto: "modified"),
    5: .same(proto: "unknown"),
  ]

  fileprivate class _StorageClass {
    var _path: String? = nil
    var _size: UInt32? = nil
    var _created: PolarDateTime? = nil
    var _modified: PolarDateTime? = nil
    var _unknown: PolarDateTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _path = source._path
      _size = source._size
      _created = source._created
      _modified = source._modified
      _unknown = source._unknown
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarDirectory.PolarEntry) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._path != other_storage._path {return false}
        if _storage._size != other_storage._size {return false}
        if _storage._created != other_storage._created {return false}
        if _storage._modified != other_storage._modified {return false}
        if _storage._unknown != other_storage._unknown {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarSessionData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    20: .same(proto: "end"),
    2: .same(proto: "exerciseCount"),
    3: .same(proto: "device"),
    4: .same(proto: "model"),
    5: .same(proto: "duration"),
    6: .same(proto: "distance"),
    7: .same(proto: "calories"),
    8: .same(proto: "heartrate"),
    9: .same(proto: "heartrateDuration"),
    10: .same(proto: "trainingLoad"),
    11: .same(proto: "label"),
  ]

  fileprivate class _StorageClass {
    var _start: PolarDateTime? = nil
    var _end: PolarDateTime? = nil
    var _exerciseCount: UInt32? = nil
    var _device: String? = nil
    var _model: String? = nil
    var _duration: PolarTime? = nil
    var _distance: Float? = nil
    var _calories: UInt32? = nil
    var _heartrate: PolarHeartrate? = nil
    var _heartrateDuration: PolarTime? = nil
    var _trainingLoad: PolarTrainingLoad? = nil
    var _label: PolarSessionData.PolarLabel? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
      _exerciseCount = source._exerciseCount
      _device = source._device
      _model = source._model
      _duration = source._duration
      _distance = source._distance
      _calories = source._calories
      _heartrate = source._heartrate
      _heartrateDuration = source._heartrateDuration
      _trainingLoad = source._trainingLoad
      _label = source._label
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarSessionData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._start != other_storage._start {return false}
        if _storage._end != other_storage._end {return false}
        if _storage._exerciseCount != other_storage._exerciseCount {return false}
        if _storage._device != other_storage._device {return false}
        if _storage._model != other_storage._model {return false}
        if _storage._duration != other_storage._duration {return false}
        if _storage._distance != other_storage._distance {return false}
        if _storage._calories != other_storage._calories {return false}
        if _storage._heartrate != other_storage._heartrate {return false}
        if _storage._heartrateDuration != other_storage._heartrateDuration {return false}
        if _storage._trainingLoad != other_storage._trainingLoad {return false}
        if _storage._label != other_storage._label {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarSessionData.PolarLabel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarSessionData.PolarLabel) -> Bool {
    if self._name != other._name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarExerciseData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "duration"),
    3: .same(proto: "sport"),
    4: .same(proto: "distance"),
    5: .same(proto: "calories"),
    6: .same(proto: "trainingLoad"),
    9: .same(proto: "index"),
    10: .same(proto: "ascent"),
    11: .same(proto: "descent"),
  ]

  fileprivate class _StorageClass {
    var _start: PolarDateTime? = nil
    var _duration: PolarTime? = nil
    var _sport: PolarExerciseData.PolarSport? = nil
    var _distance: Float? = nil
    var _calories: UInt32? = nil
    var _trainingLoad: PolarTrainingLoad? = nil
    var _index: PolarExerciseData.PolarRunningIndex? = nil
    var _ascent: Float? = nil
    var _descent: Float? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _duration = source._duration
      _sport = source._sport
      _distance = source._distance
      _calories = source._calories
      _trainingLoad = source._trainingLoad
      _index = source._index
      _ascent = source._ascent
      _descent = source._descent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarExerciseData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._start != other_storage._start {return false}
        if _storage._duration != other_storage._duration {return false}
        if _storage._sport != other_storage._sport {return false}
        if _storage._distance != other_storage._distance {return false}
        if _storage._calories != other_storage._calories {return false}
        if _storage._trainingLoad != other_storage._trainingLoad {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._ascent != other_storage._ascent {return false}
        if _storage._descent != other_storage._descent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarExerciseData.PolarSport: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarExerciseData.PolarSport) -> Bool {
    if self._value != other._value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarExerciseData.PolarRunningIndex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "duration"),
  ]

  fileprivate class _StorageClass {
    var _value: UInt32? = nil
    var _duration: PolarTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _duration = source._duration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarExerciseData.PolarRunningIndex) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._value != other_storage._value {return false}
        if _storage._duration != other_storage._duration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarHeartrate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "average"),
    2: .same(proto: "maximum"),
    3: .same(proto: "minimum"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarHeartrate) -> Bool {
    if self._average != other._average {return false}
    if self._maximum != other._maximum {return false}
    if self._minimum != other._minimum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarTrainingLoad: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "recovery"),
    3: .same(proto: "carbs"),
    4: .same(proto: "protein"),
    5: .same(proto: "fat"),
  ]

  fileprivate class _StorageClass {
    var _value: UInt32? = nil
    var _recovery: PolarTime? = nil
    var _carbs: UInt32? = nil
    var _protein: UInt32? = nil
    var _fat: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _recovery = source._recovery
      _carbs = source._carbs
      _protein = source._protein
      _fat = source._fat
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarTrainingLoad) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._value != other_storage._value {return false}
        if _storage._recovery != other_storage._recovery {return false}
        if _storage._carbs != other_storage._carbs {return false}
        if _storage._protein != other_storage._protein {return false}
        if _storage._fat != other_storage._fat {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarDateTime: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "time"),
    3: .same(proto: "timezone"),
  ]

  fileprivate class _StorageClass {
    var _date: PolarDate? = nil
    var _time: PolarTime? = nil
    var _timezone: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _time = source._time
      _timezone = source._timezone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PolarDateTime) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._date != other_storage._date {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._timezone != other_storage._timezone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarDate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "day"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarDate) -> Bool {
    if self._year != other._year {return false}
    if self._month != other._month {return false}
    if self._day != other._day {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PolarTime: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hour"),
    2: .same(proto: "minute"),
    3: .same(proto: "second"),
    4: .same(proto: "milisecond"),
  ]

  func _protobuf_generated_isEqualTo(other: PolarTime) -> Bool {
    if self._hour != other._hour {return false}
    if self._minute != other._minute {return false}
    if self._second != other._second {return false}
    if self._milisecond != other._milisecond {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
